
worker_processes 4;
worker_cpu_affinity 0001 0010 0100 1000;

worker_rlimit_nofile 16000;

events {
    use epoll;
    worker_connections 4000;
    multi_accept on;
}

error_log logs/error.log;

http {

    lua_shared_dict cache 2500m;

    access_log off;

    tcp_nopush on;
    tcp_nodelay on;

    init_by_lua_block {

        cjson = require "cjson"

        db = {
            user = {},
            location = {},
            visit = {}
        }

        coercion = {
            user_visits = {
                fromDate   = tonumber,
                toDate     = tonumber,
                toDistance = tonumber
            },
            location_avg = {
                fromDate   = tonumber,
                toDate     = tonumber,
                fromAge    = tonumber,
                toAge      = tonumber
            }
        }

        schemas = {
            user = {
                id         = "number",
                email      = "string",
                first_name = "string",
                last_name  = "string",
                gender     = "string",
                birth_date = "number"
            },
            location = {
                id       = "number",
                place    = "string",
                country  = "string",
                city     = "string",
                distance = "number"
            },
            visit = {
                id         = "number",
                location   = "number",
                user       = "number",
                visited_at = "number",
                mark       = "number"
            },
            user_visits = {
                fromDate   = "number",
                toDate     = "number",
                toDistance = "number",
                country    = "string"
            },
            location_avg = {
                fromDate = "number",
                toDate   = "number",
                fromAge  = "number",
                toAge    = "number",
                gender   = "string"
            }
        }

        function minus_age (age)
            local date = os.date("*t")
            date.year = date.year - age
            return os.time(date)
        end

        function coerce_fields (name, fields)
            local rules = coercion[name]
            for k, v in pairs(fields) do
                if rules[k] then
                    local v_new = rules[k](v)
                    if v_new then
                        fields[k] = v_new
                    else
                        ngx.exit(ngx.HTTP_BAD_REQUEST)
                    end
                end
            end
        end

        function validate_fields (name, fields)
            local schema = schemas[name]
            for k, v in pairs(fields) do
                if type(v) ~= schema[k] then
                    ngx.exit(ngx.HTTP_BAD_REQUEST)
                end
            end
        end

        function handler_get_entity (name)
            local key = name .. "/" .. ngx.var.entity_id
            local e = ngx.shared.cache:get(key)
            if e then
                ngx.say(e)
            else
                ngx.exit(ngx.HTTP_NOT_FOUND)
            end
        end

        function get_entity_visits_cache (entity, entity_id)
            local key = entity ..  "/" .. entity_id .. "/visits"
            local val = ngx.shared.cache:get(key)
            if val then
                return cjson.decode(val)
            else
                return {}
            end
        end

        function get_user_visits_cache (user_id)
            return get_entity_visits_cache("user", user_id)
        end

        function get_location_visits_cache (location_id)
            return get_entity_visits_cache("location", location_id)
        end

        function set_entity_visits_cache (entity, entity_id, cache)
            local key = entity ..  "/" .. entity_id .. "/visits"
            ngx.shared.cache:set(key, cjson.encode(cache), 0)
        end

        function set_user_visits_cache (user_id, cache)
            set_entity_visits_cache("user", user_id, cache)
        end

        function set_location_visits_cache (location_id, cache)
            set_entity_visits_cache("location", location_id, cache)
        end

        function handler_create_entity (name)
            local body = ngx.var.request_body
            if not body then
                ngx.exit(ngx.HTTP_BAD_REQUEST)
            end
            local fields = cjson.decode(body)
            validate_fields(name, fields)
            local key = name .. "/" .. fields.id
            local ok = ngx.shared.cache:set(key, body, 0)

            if name == "visit" then

                local cache = get_user_visits_cache(fields.user)
                cache[fields.id] = true
                set_user_visits_cache(fields.user, cache)

            end

            if ok then
                ngx.say("{}")
            else
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end
        end

        function handler_update_entity (name)
            local key = name .. "/" .. ngx.var.entity_id
            local e = ngx.shared.cache:get(key)

            if not e then
                ngx.exit(ngx.HTTP_NOT_FOUND)
            end

            local body = ngx.var.request_body
            if not body then
                ngx.exit(ngx.HTTP_BAD_REQUEST)
            end

            local fields = cjson.decode(body)
            validate_fields(name, fields)

            local entity = cjson.decode(e)

            for k, v in pairs(fields) do
                entity[k] = v
            end

            ngx.shared.cache:set(key, cjson.encode(entity))
            ngx.say("{}")
        end

        function visit_sorter (v1, v2)
            return v1.visited_at < v2.visited_at
        end

    }

    server {

        chunked_transfer_encoding off;

        listen 80;

        charset utf-8;
        charset_types application/json;
        default_type application/json;

        error_page 404 @404;

        error_page 400 @400;

        location @404 {
            return 404 "{}";
        }

        location @400 {
            return 400 "{}";
        }

        location /reset {
            access_by_lua_block {
                db.user = {}
                db.location = {}
                db.visit = {}
                collectgarbage()
                ngx.say("{}")
            }
        }

        location /users/new {
            lua_need_request_body on;
            access_by_lua_block {
                handler_create_entity("user")
            }
        }

        location /locations/new {
            lua_need_request_body on;
            access_by_lua_block {
                handler_create_entity("location")
            }
        }

        location /visits/new {
            lua_need_request_body on;
            access_by_lua_block {
                handler_create_entity("visit")
            }
        }

        location ~ ^/users/([0-9]+)$ {
            set $entity_id $1;
            if ($request_method = GET) {
                access_by_lua_block {
                    handler_get_entity("user")
                }
            }
            if ($request_method = POST) {
                lua_need_request_body on;
                content_by_lua_block {
                    handler_update_entity("user")
                }
            }
        }

        location ~ ^/locations/([0-9]+)$ {
            set $entity_id $1;
            if ($request_method = GET) {
                access_by_lua_block {
                    handler_get_entity("location")
                }
            }
            if ($request_method = POST) {
                lua_need_request_body on;
                content_by_lua_block {
                    handler_update_entity("location")
                }
            }
        }

        location ~ ^/visits/([0-9]+)$ {
            set $entity_id $1;
            if ($request_method = GET) {
                access_by_lua_block {
                    handler_get_entity("visit")
                }
            }
            if ($request_method = POST) {
                lua_need_request_body on;
                content_by_lua_block {
                    handler_update_entity("visit")
                }
            }
        }

        location ~ ^/locations/([0-9]+)/avg$ {
            set $location_id $1;

            access_by_lua_block {

                local location_id = tonumber(ngx.var.location_id)

                if not db.location[location_id] then
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end

                local qs = ngx.req.get_uri_args()

                coerce_fields("location_avg", qs)
                validate_fields("location_avg", qs)

                local mark_sum = 0
                local mark_num = 0

                for visit_id, _ in pairs(db.visit) do

                    local visit = get_visit(visit_id)

                    if qs.fromDate and visit.visited_at <= qs.fromDate then
                        goto continue
                    end

                    if qs.toDate and visit.visited_at >= qs.toDate then
                        goto continue
                    end

                    local user = db.user[visit.location]

                    if qs.fromAge and user.birth_date <= minus_age(qs.fromAge) then
                        goto continue
                    end

                    if qs.toAge and user.birth_date >= minus_age(qs.toAge) then
                        goto continue
                    end

                    if qs.gender and user.gender ~= qs.gender then
                        goto continue
                    end

                    mark_sum = mark_sum + visit.mark
                    mark_num = mark_num + 1

                    ::continue::

                end

                if mark_num == 0 then
                    ngx.say("{\"avg\": 0}")
                else
                    local avg = mark_sum / mark_num
                    ngx.say(string.format("{\"avg\": %.5f}", avg))
                end

            }
        }

        location ~ ^/users/([0-9]+)/visits$ {
            set $user_id $1;

            access_by_lua_block {

                local user_id = ngx.var.user_id
                local key = "user" .. "/" .. user_id
                local user = ngx.shared.cache:get(key)

                if not user then
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end

                user = cjson.decode(user)

                local qs = ngx.req.get_uri_args()

                coerce_fields("user_visits", qs)
                validate_fields("user_visits", qs)

                local cache = get_user_visits_cache(user_id)

                for visit_id, _ in pairs(cache) do

                    local visit = json.decode(ngx.shared.cache:get("visit/" .. visit_id))

                    if qs.fromDate and visit.visited_at <= qs.fromDate then
                        goto continue
                    end

                    if qs.toDate and visit.visited_at >= qs.toDate then
                        goto continue
                    end

                    local location = json.decode(ngx.shared.cache:get("location/" .. visit.location))

                    if qs.toDistance and location.distance >= qs.toDistance then
                        goto continue
                    end

                    if qs.country and location.country ~= qs.country then
                        goto continue
                    end

                    table.insert(visits, {
                        mark = visit.mark,
                        visited_at = visit.visited_at,
                        place = location.place
                    })

                    ::continue::

                end

                if next(visits) == nil then
                    ngx.say("{\"visits\": []}")
                else
                    table.sort(visits, visit_sorter)
                    ngx.say(cjson.encode({visits = visits}))
                end
            }
        }

        location / {
            return 404 "{}";
        }
    }
}
