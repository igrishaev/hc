
worker_processes 1;

error_log logs/error.log;

events {
    worker_connections 1024;
}

http {

    init_by_lua_block {

        cjson = require "cjson"

        db = {}
        db["user"] = {}
        db["location"] = {}
        db["visit"] = {}

        coercion = {
            user_visits = {
                fromDate   = tonumber,
                toDate     = tonumber,
                toDistance = tonumber
            },
            location_avg = {
                fromDate   = tonumber,
                toDate     = tonumber,
                fromAge    = tonumber,
                toAge      = tonumber
            }
        }

        schemas = {
            user = {
                id         = "number",
                email      = "string",
                first_name = "string",
                last_name  = "string",
                gender     = "string",
                birth_date = "number"
            },
            location = {
                id       = "number",
                place    = "string",
                country  = "string",
                city     = "string",
                distance = "number"
            },
            visit = {
                id         = "number",
                location   = "number",
                user       = "number",
                visited_at = "number",
                mark       = "number"
            },
            user_visits = {
                fromDate   = "number",
                toDate     = "number",
                toDistance = "number",
                country =  "string"
            }
        }

        function coerce_fields (name, fields)
            local rules = coercion[name]
            for k, v in pairs(fields) do
                if rules[k] then
                    fields[k] = rules[k](v)
                end
            end
        end

        function validate_fields (name, fields)
            local schema = schemas[name]
            for k, v in pairs(fields) do
                if type(v) ~= schema[k] then
                    ngx.exit(ngx.HTTP_BAD_REQUEST)
                end
            end
        end

        function handler_get_entity (name)
            local entity_id = tonumber(ngx.var.entity_id)
            local entity = db[name][entity_id]
            if entity then
                ngx.say(cjson.encode(entity))
            else
                ngx.exit(ngx.HTTP_NOT_FOUND)
            end
        end

        function handler_create_entity (name)
            ngx.req.read_body()
            local body = ngx.var.request_body
            local fields = cjson.decode(body)
            validate_fields(name, fields)
            local entity_id = fields["id"]
            db[name][entity_id] = fields
            ngx.say("{}")
        end

        function handler_update_entity (name)
            local entity_id = tonumber(ngx.var.entity_id)
            local entity = db[name][entity_id]
            if not entity then
                ngx.exit(ngx.HTTP_NOT_FOUND)
            end
            ngx.req.read_body()
            local body = ngx.var.request_body
            local fields = cjson.decode(body)
            validate_fields(name, fields)
            for k, v in pairs(fields) do
                entity[k] = v
            end
            ngx.say("{}")
        end

    }

    server {

        chunked_transfer_encoding off;

        listen 80;

        access_log off;

        charset utf-8;
        charset_types application/json;
        default_type application/json;

        error_page 404 @404;

        error_page 400 @400;

        location @404 {
            return 404 "{}";
        }

        location @400 {
            return 400 "{}";
        }

        location /users/new {
            access_by_lua_block {
                handler_create_entity("user")
            }
        }

        location /locations/new {
            access_by_lua_block {
                handler_create_entity("location")
            }
        }

        location /visits/new {
            access_by_lua_block {
                handler_create_entity("visit")
            }
        }

        location ~ ^/users/([0-9]+)$ {
            set $entity_id $1;
            if ($request_method = GET) {
                access_by_lua_block {
                    handler_get_entity("user")
                }
            }
            if ($request_method = POST) {
                content_by_lua_block {
                    handler_update_entity("user")
                }
            }
        }

        location ~ ^/locations/([0-9]+)$ {
            set $entity_id $1;
            if ($request_method = GET) {
                access_by_lua_block {
                    handler_get_entity("location")
                }
            }
            if ($request_method = POST) {
                content_by_lua_block {
                    handler_update_entity("location")
                }
            }
        }

        location ~ ^/visits/([0-9]+)$ {
            set $entity_id $1;
            if ($request_method = GET) {
                access_by_lua_block {
                    handler_get_entity("visit")
                }
            }
            if ($request_method = POST) {
                content_by_lua_block {
                    handler_update_entity("visit")
                }
            }
        }

        location ~ ^/users/([0-9]+)/visits$ {
            set $user_id $1;

            access_by_lua_block {

                local user_id = tonumber(ngx.var.user_id)
                local qs = ngx.req.get_uri_args ()

                coerce_fields("users_visits", qs)
                validate_fields("users_visits", qs)

                local fromDate = qs["fromDate"]

                local visits = {}
                for _, visit in pairs(db["visit"]) do

                    if visit["user"] ~= user_id then
                        goto continue
                    end

                    table.insert(visits, visit)

                    ::continue::

                end

                ngx.say(cjson.encode({visits = visits}))
            }

        }

    }
}
