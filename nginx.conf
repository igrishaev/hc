
worker_processes 1;
error_log logs/error.log;

events {
    worker_connections 1024;
}

http {

    init_by_lua_block {

        cjson = require "cjson"

        db = {}
        db["users"] = {}
        db["locations"] = {}
        db["visits"] = {}

    }

    server {

        listen 80;

        charset utf-8;
        charset_types application/json;
        default_type application/json;

        location /users/new {
            set $user_id $1;

            access_by_lua_block {

                ngx.req.read_body()
                local body = ngx.var.request_body

                local fields = cjson.decode(body)

                local types = {
                    id         = "number",
                    email      = "string",
                    first_name = "string",
                    last_name  = "string",
                    gender     = "string",
                    birth_date = "number"
                }

                for k, v in pairs(fields) do
                    if type(v) ~= types[k] then
                        ngx.exit(ngx.HTTP_BAD_REQUEST)
                    end
                end

                local user_id = fields["id"]
                db["users"][user_id] = fields

                ngx.say("{}")
            }

        }

        location ~ ^/users/([0-9]+)$ {
            set $user_id $1;

            if ($request_method = GET) {
            access_by_lua_block {

                local user_id = tonumber(ngx.var.user_id)
                local user = db["users"][user_id]

                if user then
                    ngx.say(cjson.encode(user))
                else
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end

            }
            }

            if ($request_method = POST) {
            content_by_lua_block {

                local user_id = tonumber(ngx.var.user_id)
                local user = db["users"][user_id]

                if not user then
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end

                ngx.req.read_body()
                local body = ngx.var.request_body
                local fields = cjson.decode(body)

                local types = {
                    email      = "string",
                    first_name = "string",
                    last_name  = "string",
                    gender     = "string",
                    birth_date = "number"
                }

                for k, v in pairs(fields) do
                    if type(v) ~= types[k] then
                        ngx.exit(ngx.HTTP_BAD_REQUEST)
                    end
                end

                for k, v in pairs(fields) do
                    user[k] = v
                end

                ngx.say("{}")

            }
        }
        }

        location ~ ^/locations/([0-9]+)$ {
            set $location_id $1;
            content_by_lua_block {
                ngx.say(get_user(ngx.var.user_id))
            }
        }

        location ~ ^/locations/([0-9]+)$ {
            set $location_id $1;
            content_by_lua_block {
                ngx.say(get_user(ngx.var.user_id))
            }
        }



    }
}
