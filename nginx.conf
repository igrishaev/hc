
worker_processes 1;

worker_rlimit_nofile 16000;

events {
    use epoll;
    worker_connections 4000;
    multi_accept on;
}

error_log logs/error.log;

http {

    access_log off;

    tcp_nopush on;
    tcp_nodelay on;

    init_by_lua_block {

        cjson = require "cjson"

        sqlite3 = require "lsqlite3complete"
        assert(sqlite3)

        db = sqlite3.open_memory()
        db:exec[=[

create table user (
    id         integer primary key,
    email      text not null,
    first_name text not null,
    last_name  text not null,
    gender     text not null,
    birth_date integer not null
);

create table location (
    id       integer primary key,
    place    text not null,
    country  text not null,
    city     text not null,
    distance integer not null
);

create table visit (
    id         integer primary key,
    location   integer not null,
    user       integer not null,
    visited_at integer not null,
    mark       integer not null
);

create index user_trg on visit (user);
create index location_trg on location (user);

        ]=]

        coercion = {
            user_visits = {
                fromDate   = tonumber,
                toDate     = tonumber,
                toDistance = tonumber
            },
            location_avg = {
                fromDate   = tonumber,
                toDate     = tonumber,
                fromAge    = tonumber,
                toAge      = tonumber
            }
        }

        schemas = {
            user = {
                id         = "number",
                email      = "string",
                first_name = "string",
                last_name  = "string",
                gender     = "string",
                birth_date = "number"
            },
            location = {
                id       = "number",
                place    = "string",
                country  = "string",
                city     = "string",
                distance = "number"
            },
            visit = {
                id         = "number",
                location   = "number",
                user       = "number",
                visited_at = "number",
                mark       = "number"
            },
            user_visits = {
                fromDate   = "number",
                toDate     = "number",
                toDistance = "number",
                country    = "string"
            },
            location_avg = {
                fromDate = "number",
                toDate   = "number",
                fromAge  = "number",
                toAge    = "number",
                gender   = "string"
            }
        }

        function minus_age (age)
            local date = os.date("*t")
            date.year = date.year - age
            return os.time(date)
        end

        function coerce_fields (name, fields)
            local rules = coercion[name]
            for k, v in pairs(fields) do
                if rules[k] then
                    local v_new = rules[k](v)
                    if v_new then
                        fields[k] = v_new
                    else
                        ngx.exit(ngx.HTTP_BAD_REQUEST)
                    end
                end
            end
        end

        function validate_fields (name, fields)
            local schema = schemas[name]
            for k, v in pairs(fields) do
                if type(v) ~= schema[k] then
                    ngx.exit(ngx.HTTP_BAD_REQUEST)
                end
            end
        end

        function handler_get_entity (entity)
            local entity_id = ngx.var.entity_id
            local q = "select * from " .. entity .. " where id = " .. entity_id
            for row in db:nrows(q) do
                ngx.say(cjson.encode(row))
                ngx.exit(ngx.HTTP_OK)
            end
            ngx.exit(ngx.HTTP_NOT_FOUND)
        end

        function entity_exists (entity, entity_id)
            local q = "select 1 from %s where id = ?"
            for _ in db:nrows(string.format(q, entity, entity_id)) do
                return true
            end
            return false
        end

        function handler_create_entity (entity)

            local body = ngx.var.request_body

            if not body then
                ngx.exit(ngx.HTTP_BAD_REQUEST)
            end

            local fields = cjson.decode(body)
            validate_fields(entity, fields)

            local keys = {}
            local vals = {}

            for k, v in pairs(fields) do
                table.insert(keys, k)
                table.insert(vals, string.format("'%s'", v))
            end

            local tpl = "insert into %s (%s) values (%s)"
            local q = string.format(tpl, entity,
                                    table.concat(keys, ", "),
                                    table.concat(vals, ", "))
            db:exec(q)
            ngx.exit(ngx.HTTP_OK)
        end

        function handler_update_entity (entity)

            local entity_id = ngx.var.entity_id

            if not entity_exists(entity, entity_id) then
                ngx.exit(ngx.HTTP_NOT_FOUND)
            end

            local body = ngx.var.request_body
            if not body then
                ngx.exit(ngx.HTTP_BAD_REQUEST)
            end

            local fields = cjson.decode(body)
            validate_fields(entity, fields)

            local sets = {}

            for k, v in pairs(fields) do
                table.insert(sets, string.format("%s = '%s'", k, v))
            end

            local tpl = "update %s set %s where id = %s"
            local q = string.format(tpl, entity, table.concat(sets, ", "), entity_id)

            db:exec(q)
            ngx.exit(ngx.HTTP_OK)
        end

    }

    server {

        chunked_transfer_encoding off;

        listen 80;

        charset utf-8;
        charset_types application/json;
        default_type application/json;

        error_page 404 @404;

        error_page 400 @400;

        location @404 {
            return 404 "{}";
        }

        location @400 {
            return 400 "{}";
        }

        location /users/new {
            lua_need_request_body on;
            access_by_lua_block {
                handler_create_entity("user")
            }
        }

        location /locations/new {
            lua_need_request_body on;
            access_by_lua_block {
                handler_create_entity("location")
            }
        }

        location /visits/new {
            lua_need_request_body on;
            access_by_lua_block {
                handler_create_entity("visit")
            }
        }

        location ~ ^/users/([0-9]+)$ {
            set $entity_id $1;
            if ($request_method = GET) {
                access_by_lua_block {
                    handler_get_entity("user")
                }
            }
            if ($request_method = POST) {
                lua_need_request_body on;
                content_by_lua_block {
                    handler_update_entity("user")
                }
            }
        }

        location ~ ^/locations/([0-9]+)$ {
            set $entity_id $1;
            if ($request_method = GET) {
                access_by_lua_block {
                    handler_get_entity("location")
                }
            }
            if ($request_method = POST) {
                lua_need_request_body on;
                content_by_lua_block {
                    handler_update_entity("location")
                }
            }
        }

        location ~ ^/visits/([0-9]+)$ {
            set $entity_id $1;
            if ($request_method = GET) {
                access_by_lua_block {
                    handler_get_entity("visit")
                }
            }
            if ($request_method = POST) {
                lua_need_request_body on;
                content_by_lua_block {
                    handler_update_entity("visit")
                }
            }
        }

        location ~ ^/locations/([0-9]+)/avg$ {
            set $location_id $1;

            access_by_lua_block {

                local location_id = ngx.var.location_id

                -- if not entity_exists("location", location_id) then
                --     ngx.exit(ngx.HTTP_NOT_FOUND)
                -- end

                local qs = ngx.req.get_uri_args()

                coerce_fields("location_avg", qs)
                validate_fields("location_avg", qs)

                local q = [=[
select
    avg(v.mark) as avg
from visit v
join user u on v.user = u.id
where
    v.location = :location_id
order by
    v.visited_at;
]=]

                local avg = 0
                for row in db:nrows(string.format(q, location_id)) do
                    if row.avg then
                        avg = row.avg
                    end
                end

                ngx.say(string.format("{\"avg\": %.5f}", avg))
            }
        }

        location ~ ^/users/([0-9]+)/visits$ {
            set $user_id $1;

            access_by_lua_block {

                local user_id = ngx.var.user_id

                -- if not entity_exists("user", user_id) then
                --     ngx.exit(ngx.HTTP_NOT_FOUND)
                -- end

                local qs = ngx.req.get_uri_args()

                coerce_fields("user_visits", qs)
                validate_fields("user_visits", qs)

                local q = [=[
select
    v.mark,
    v.visited_at,
    l.place
from visit v
join location l on v.location = l.id
where
    v.user = %s
order by
    v.visited_at;
]=]
                local visits = {}
                for row in db:nrows(string.format(q, user_id)) do
                    table.insert(visits, row)
                end

                if next(visits) == nil then
                    ngx.say("{\"visits\": []}")
                else
                    ngx.say(cjson.encode({visits = visits}))
                end
            }
        }

        location / {
            return 404 "{}";
        }
    }
}
